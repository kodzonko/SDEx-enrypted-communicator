import { WebSQLDatabase } from "expo-sqlite";
import logger from "../Logger";
import { MISSING_SQL_DB_SESSION_FAILURE_MSG } from "../Messages";
import { ChatRoom, Contact, ContactListItem, Message } from "../Types";
import {
  getChatRoomsQuery,
  getContactByIdQuery,
  getContactsQuery,
  getMessagesByContactIdQuery,
  getUnreadCountQuery,
  saveContactQuery,
  saveMessageQuery,
} from "./SqlStorageMiddlewares";

/**
 * Get all contacts from database.
 * @param dbSession WebSQLDatabase session.
 * @returns List of contacts.
 */
export const getContacts = async (dbSession?: WebSQLDatabase): Promise<ContactListItem[]> => {
  logger.info("Getting contacts.");
  const contacts: ContactListItem[] = [];
  if (!dbSession) {
    logger.error(`${MISSING_SQL_DB_SESSION_FAILURE_MSG} Returning [].`);
    return contacts;
  }
  const results = await getContactsQuery(dbSession);
  logger.info("Converting database results to Contact[].");
  results.forEach((result) => {
    contacts.push(
      new ContactListItem(
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        <number>result.contact_id,
        <string>result.name,
        <string>result.surname,
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */
      ),
    );
  });
  logger.debug(`Results converted to Contacts: ${JSON.stringify(contacts)}`);
  logger.info("Returning contact.");
  return contacts;
};

/**
 * Get a contact by id from database.
 * @param contactId Id of a contact to fetch from database.
 * @param dbSession WebSQLDatabase session.
 * @returns Contact object if the contact was found in the database, undefined otherwise.
 */
export const getContactById = async (
  contactId: number,
  dbSession?: WebSQLDatabase,
): Promise<Contact | undefined> => {
  logger.info("Getting contact by id.");
  if (!dbSession) {
    logger.error(`${MISSING_SQL_DB_SESSION_FAILURE_MSG} Returning.`);
    return undefined;
  }
  /* eslint-disable-next-line @typescript-eslint/no-unsafe-assignment */
  const result = (await getContactByIdQuery(contactId, dbSession))[0];
  if (!result) {
    logger.info(`Contact with id=${contactId} not found in the database. Returning`);
    return undefined;
  }
  logger.info("Converting database result to Contact.");
  const contact: Contact = new Contact(
    /* eslint-disable @typescript-eslint/no-unsafe-member-access */
    <string>result.name,
    <string>result.surname,
    <string>result.public_key,
    <string>result.messaging_key,
    <number>result.contact_id,
    /* eslint-enable @typescript-eslint/no-unsafe-member-access */
  );
  logger.debug(`Result converted to Contact: ${JSON.stringify(contact)}`);
  logger.info("Returning Contact.");
  return contact;
};

/**
 * Save contact into a database.
 * @param contact Contact data to save.
 * @param dbSession WebSQLDatabase session.
 * @returns True if the contact was saved successfully, false otherwise.
 */
export const saveContact = async (
  contact: Contact,
  dbSession?: WebSQLDatabase,
): Promise<boolean> => {
  logger.info("Saving a contact.");
  if (!dbSession) {
    logger.error(`${MISSING_SQL_DB_SESSION_FAILURE_MSG} Returning false.`);
    return false;
  }
  const results = await saveContactQuery(contact, dbSession);
  if (results.rowsAffected === 1 && results.insertId) {
    logger.debug(`Contact saved successfully. Inserted id=${results.insertId}`);
    logger.info("Contact saved successfully.");
    /* eslint-disable-next-line no-param-reassign */
    contact.id = results.insertId;
    logger.info("Contact instance has been updated with an id generated by database.");
    return true;
  }
  logger.error("Failed to save a contact.");
  return false;
};

/**
 * Get data to display ChatRooms lists.
 * @param dbSession WebSQLDatabase session.
 * @returns List of ChatRoomListItem objects.
 */
export const getChatRooms = async (dbSession?: WebSQLDatabase): Promise<ChatRoom[]> => {
  logger.info("Getting chat rooms.");
  const chatRooms: ChatRoom[] = [];
  if (!dbSession) {
    logger.error(`${MISSING_SQL_DB_SESSION_FAILURE_MSG} Returning []`);
    return chatRooms;
  }
  const results = await getChatRoomsQuery(dbSession);
  logger.info("Converting database results to ChatRoom items.");
  results.forEach((result) => {
    chatRooms.push(
      new ChatRoom(
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        <string>result.name,
        <string>result.surname,
        <number>result.contact_id,
        new Date(<string>result.last_message_date),
        <number>result.unread_message_count,
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */
      ),
    );
  });
  logger.debug(`Results converted to ChatRooms: ${JSON.stringify(chatRooms)}`);
  logger.info("Returning chat rooms.");
  return chatRooms;
};

/**
 *  Get messages with a provided contact.
 * @param contactId Id of the contact associated with the messages.
 * @param dbSession WebSQLDatabase session.
 * @returns List of messages with the provided contact.
 */
export const getMessagesByContactId = async (
  contactId: number,
  dbSession?: WebSQLDatabase,
): Promise<Message[]> => {
  logger.info("Getting messages with a provided contact.");
  const messages: Message[] = [];
  if (!dbSession) {
    logger.error(`${MISSING_SQL_DB_SESSION_FAILURE_MSG} Returning []`);
    return messages;
  }
  const results = await getMessagesByContactIdQuery(contactId, dbSession);
  logger.info("Converting database results to Message[].");
  results.forEach((result) => {
    messages.push(
      new Message(
        /* eslint-disable @typescript-eslint/no-unsafe-member-access */
        <number>result.fk_contact_id,
        <string>result.text,
        new Date(<string>result.created_at),
        <number>result.unread === 1,
        result.image ? <string>result.image : undefined,
        result.video ? <string>result.video : undefined,
        result.audio ? <string>result.audio : undefined,
        <number>result.message_id,
        /* eslint-enable @typescript-eslint/no-unsafe-member-access */
      ),
    );
  });
  logger.debug(`Results converted to Messages=${JSON.stringify(messages)}`);
  logger.info("Returning messages list.");
  return messages;
};

/**
 * Save message into a database.
 * @param message Message data to save.
 * @param dbSession WebSQLDatabase session.
 * @returns True if the message was saved successfully, false otherwise.
 */
export const saveMessage = async (
  message: Message,
  dbSession?: WebSQLDatabase,
): Promise<boolean> => {
  logger.info("Saving a message.");
  if (!dbSession) {
    logger.error(`${MISSING_SQL_DB_SESSION_FAILURE_MSG} Returning.`);
    return false;
  }
  if (!(await getContactById(message.contactId, dbSession))) {
    logger.error(
      `Contact with id=${message.contactId} doesn't exist in the database. Message rejected.`,
    );
    return false;
  }
  const results = await saveMessageQuery(message, dbSession);
  if (results.rowsAffected === 1 && results.insertId) {
    logger.debug(`Message saved successfully. Inserted id=${results.insertId}`);
    logger.info("Message saved successfully.");
    /* eslint-disable-next-line no-param-reassign */
    message.id = results.insertId;
    logger.info("Message instance has been updated with an id generated by database.");
    return true;
  }
  logger.error("Failed to save a message.");
  return false;
};

/**
 * Query the database for a number of unread messages.
 * @param dbSession Open SQL database session.
 * @returns Number of unread messages.
 */
export const getUnreadCount = async (dbSession?: WebSQLDatabase): Promise<number> => {
  logger.info("Getting a number of unread messages from SQL database.");
  if (!dbSession) {
    logger.error("Failed to open db session. Returning 0.");
    return 0;
  }
  logger.info("Dispatching SQL middleware.");
  const results = await getUnreadCountQuery(dbSession);
  /* eslint-disable-next-line @typescript-eslint/no-unsafe-member-access */
  const parsedResult: number = <number>results[0].count;
  logger.debug(`Parsed result=${parsedResult}`);
  logger.info("Returning unread count.");
  return parsedResult;
};
